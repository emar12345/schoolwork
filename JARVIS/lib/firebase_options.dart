// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

class DefaultFirebaseOptions {
  static Future<FirebaseOptions> get currentPlatform async {
    await dotenv.load(
        fileName:
            ".env"); // Load the .env file（please place env file in the root directory of the project）

    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }

    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return FirebaseOptions(
          apiKey: dotenv.env['ANDROID_API_KEY']!,
          appId: dotenv.env['ANDROID_APP_ID']!,
          messagingSenderId: dotenv.env['ANDROID_MESSAGING_SENDER_ID']!,
          projectId: dotenv.env['ANDROID_PROJECT_ID']!,
          storageBucket: dotenv.env['ANDROID_STORAGE_BUCKET']!,
        );
      case TargetPlatform.iOS:
        return FirebaseOptions(
          apiKey: dotenv.env['IOS_API_KEY']!,
          appId: dotenv.env['IOS_APP_ID']!,
          messagingSenderId: dotenv.env['IOS_MESSAGING_SENDER_ID']!,
          projectId: dotenv.env['IOS_PROJECT_ID']!,
          storageBucket: dotenv.env['IOS_STORAGE_BUCKET']!,
          androidClientId: dotenv.env['IOS_ANDROID_CLIENT_ID']!,
          iosClientId: dotenv.env['IOS_IOS_CLIENT_ID']!,
          iosBundleId: dotenv.env['IOS_BUNDLE_ID']!,
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }
}
